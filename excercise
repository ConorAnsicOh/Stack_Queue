using System;
using System.Collections.Generic;

namespace Exercise
{


    // 스택 : LIFO ( 후입 선출 Last in Frist out )
    // 큐 : FIFO ( 선입 선출 First in First out )

    // [1] [2] [3] [4] - > [ 주차장 입구 ]

    class Program
    {
        static void Main(string[] args)
        {
            // 스택과 큐를 쓰는 이유는 팀 웍 코딩에 가시성 도움을 주기 때문.
            // Using Stack & Queue helps program with your team members.

            Stack<int> stack = new Stack<int>();

            stack.Push(101);
            stack.Push(102);
            stack.Push(103);
            stack.Push(104);
            stack.Push(105);

            // 비어있는 상태에서 Pop또는 Peek을 하면 에러가 발생함.
            // If you use POP or PEEK while empty, an error occurs.
            // int data = stack.Pop();
            // int data2 = stack.Peek();
            // so change this.
            if ( stack.Count > 0 )
            {
                int data = stack.Pop();
                int data2 = stack.Peek();

            }
            int data = stack.Pop();
            int data2 = stack.Peek();

            Queue<int> queue = new Queue<int>();

            queue.Enqueue(101);
            queue.Enqueue(102);
            queue.Enqueue(103);
            queue.Enqueue(104);
            queue.Enqueue(105);

            int data3 = queue.Dequeue();
            int data4 = queue.Peek();


            // 아래 방식은 막 가져다 쓰기는 편하나 속도와 가시성에서 효율성이 떨어지기 때문에
            // Stack과 Queue를 사용해야한다.
            LinkedList<int> list = new LinkedList<int>();
            
            list.AddLast(101);
            list.AddLast(102);
            list.AddLast(103);
            list.AddLast(104);
            list.AddLast(105);

            // FIFO
            int data5 = list.First.Value;
            list.RemoveFirst();

            // LIFO
            int data6 = list.Last.Value;
            list.RemoveLast();
        }
    }
}
