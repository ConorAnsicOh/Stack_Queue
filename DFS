using System;
using System.Collections.Generic;

namespace Exercise
{
    class Graph
    {
        int[,] adj = new int[6, 6]
        {
            { 0, 1, 0, 1, 0, 0 },
            { 1, 0, 1, 1, 0, 0 },
            { 0, 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 1, 0 },
            { 0, 0, 0, 1, 0, 1 },
            { 0, 0, 0, 0, 1, 0 },
        };

        List<int>[] adj2 = new List<int>[]
        {
            new List<int>() { 1, 3 },
            new List<int>() { 0, 2, 3},
            new List<int>() { 1 },
            new List<int>() { 0, 1, 4},
            new List<int>() { 3, 5 },
            new List<int>() { 4 },
        };

        // Create an arrangement to check whether you are visiting ( 방문 체크 배열을 만듭니다. )
        bool[] visited = new bool[6];

        // adj arrangement
        public void DFS( int now) // create DFS ( Depth First Search )
        {
            
            Console.WriteLine(now);
            visited[now] = true; // 1) Visite 'now' ( 우선 now부터 방문 )
            adj.GetLength(0);

            // 2) check what is connected to 'now'
            for ( int next = 0; next < 6; next++ ) // tip : 6 = adj.GetLength(0); -- if you aren't understand, check the 'adj' arrangement.
            {

                // 3) If you find a plac1e that you haven't visited yet, you visit it. ( 'now'와 연결된 정점들을 하나씩 확인해서, 아직 미발견 상태라면 방문한다. )
                if ( adj[now, next] == 0 ) // not connected.
                {
                    continue;
                }
                if ( visited[next] ) // already visited.
                {
                    continue;
                }
                DFS(next);
            }
        }


        // adj2 arrangement
        public void DFS2(int now)
        {
            Console.WriteLine(now);
            visited[now] = true;

            foreach ( int next in adj2[now] )
            {
                if ( visited[next] )
                {
                    continue;
                }
                DFS2(next);
        }

        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            // DFS ( Depth First Search 깊이 우선 탐색 )
            // BFS ( Breadth First Search 너비 우선 탐색 )

            Graph graph = new Graph();
            graph.DFS2(3);
        }
    }
}
